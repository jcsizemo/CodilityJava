package com.sizemore.codility;

import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Vector;

public class Chlorum implements Problem {

	int chlorum(int K, int[] C, final int[] D) {

		// need a fast way to check where we are coming from
		// need a fast way to check if we're excluding anything we shouldn't

		int[] going = C;
		Vector<Vector<Integer>> coming = new Vector<Vector<Integer>>();
		for (int i = 0; i < going.length; i++)
			coming.add(new Vector<Integer>());

		for (int city : C) {
			int dest = C[city];
			// city -> dest
			// want dest -> city
			coming.get(dest).add(city);
		}

		for (Vector<Integer> comings : coming) {
			if (comings.size() < 2) continue;
			
			Collections.sort(comings, new Comparator<Integer>() {

				@Override
				public int compare(Integer o1, Integer o2) {
					if (D[o1.intValue()] >= D[o2.intValue()]) return 1;
					else return -1;
				}
				
			});
		}

		// build coming array, then loop through the array and sort each item
		// this sorting procedure will not be longer than nlgn

		int[] sortedD = new int[D.length];
		for (int i = 0; i < D.length; i++)
			sortedD[i] = D[i];
		Arrays.sort(sortedD);

		int lowest = sortedD[0];
		int highest = sortedD[sortedD.length - 1];

		// next, we want an array that tells us what the first index is of each
		// attractiveness level in the sorted array. We do this to easily
		// determine
		// if we are missing any cities that are as attractive as we need.
		// We can compare the lowest ranked
		// city and pull its value out of this new array. Every time we add a
		// new highest
		// value attractiveness to our trip, we set the highest ranked value to
		// the
		// value in this array. Each time we add a city to our trip equaling the
		// highest
		// attractiveness, we increment this number. We can easily check if we
		// are omitting any
		// cities by taking the difference between this incremented number and
		// the first index
		// of the least attractive city. This number denotes the number of
		// cities that should
		// exist in our trip, and this should equal to number currently in the
		// trip.

		// nothing excluded should be more attractive than what is included. We
		// can use
		// the sorted array to determine if the value at the end is equal to the
		// currently
		// most attractive city in our trip

		return 0;
	}

	public void execute() {

		int[] C = { 1, 3, 0, 3, 2, 4, 4 };
		int[] D = { 6, 2, 7, 5, 6, 5, 2 };
		System.out.println(chlorum(5, C, D));
	}
}
