package com.sizemore.codility;

import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;

public class Sulphur implements Problem {

	public int sulphur(int[] strengths, int[] weights, int[] parents) {
        // write your code in Java SE 8
       
        // the node that breaks the system is always going to be a leaf node
        // always start from leaf nodes
        public Set<Integer> leaves = new HashSet<Integer>();
        public List<Node> nodes = new ArrayList<Node>();
       
        for (int i = 0; i < strengths.length; i++) {
            leaves.add(i);
            nodes.add(new Node(strengths[i], weights[i], parents[i], i));
        }
       
        for (int i = 0; i < strengths.length; i++) {
           
        }
        
        return 0;
    }
   
    class Node {
       
        public List<Node> children = new ArrayList<Node>();
        public boolean isLeaf = true;
       
        private int instructionNumber;
        private int strength;
        private int weight;
        private Node parent;
       
        public Node(int strength, int weight, int parent, int instructionNumber) {
            this.strength = strength;
            this.weight = weight;
            this.parent = parent;
            if (parent != -1) {
                nodes.get(parent).children.add(this);
                leaves.remove(parent);
            }
            this.instructionNumber = instructionNumber;
            this.parent.isLeaf = false;
        }
    }

	public void execute() {

		int[] C = { 1, 3, 0, 3, 2, 4, 4 };
		int[] D = { 6, 2, 7, 5, 6, 5, 2 };
		System.out.println(sulphur(C, C, D));
	}
}
